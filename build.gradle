// First, apply the publishing plugin
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    maven {
        url "${artifactoryContext}/third-party"
        credentials {
            username = artifactoryUserName
            password = artifactoryPassword
        }
    }
  }
  dependencies {
      classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.2.5'
      classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
  }
}

defaultTasks 'build'

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'license'
apply plugin: 'maven-publish'
apply plugin: 'artifactory'

artifactory {
    publish {
        contextUrl = artifactoryContext
        repository {
            repoKey = 'gradle-snapshot'
            username = artifactoryUserName
            password = artifactoryPassword
            ivy {
                ivyLayout =      '[organisation]/[module]/[revision]/ivy-[revision].xml'
                artifactLayout = '[organisation]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'

                mavenCompatible = false
            }
        }
        defaults {
            publishPom = false
            publishIvy = true
        }
    }
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
    }
}

group = 'nl.javadude.gradle.plugins'
version = "0.13.3-INFONIC"

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories { jcenter() }

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations.compile.transitive = false

dependencies {
    compile "org.codehaus.plexus:plexus-utils:2.0.5"
    compile "com.mycila.xmltool:xmltool:3.3"
    // Using compile instead of groovy, so that it goes into the pom
    compile ('com.mycila.maven-license-plugin:maven-license-plugin:1.10.b1') {
        exclude group: 'org.apache.maven', module: 'maven-plugin-api'
        exclude group: 'org.apache.maven', module: 'maven-project'
    }
    compile gradleApi()

    def androidGradlePlugin = 'com.android.tools.build:gradle:2.0.+'
    compileOnly androidGradlePlugin
    testCompile androidGradlePlugin

    testCompile 'junit:junit:4.11'
    testCompile 'com.google.guava:guava:17.0'
    testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

license {
    ignoreFailures true
}

test {
  afterSuite { descriptor, result ->
    def indicator = "\u001B[32m✓\u001b[0m"
    if (result.failedTestCount > 0) {
      indicator = "\u001B[31m✘\u001b[0m"
    }
    logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
  }
}

def pomConfig = {
    name project.name
    description project.project_description
    url project.project_url
    inceptionYear '2011'

    scm { url project.project_scm }

    licenses {
        license([:]) {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'hierynomus'
            name 'Jeroen van Erp'
            url 'http://www.javadude.nl/'
            email 'jeroen@javadude.nl'
            roles { role 'Developer' }
        }
    }

    contributors {
        contributor {
            name 'Tim Harsch'
            email 'harschware@yahoo.com'
        }
        contributor {
            name 'Justin Ryan'
            email 'jryan@netflix.com'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

pluginBundle {
    website = "https://github.com/hierynomus/license-gradle-plugin"
    vcsUrl = "https://github.com/hierynomus/license-gradle-plugin.git"
    description = "Applies a header to files, typically a license"
    plugins {
        jythonPlugin {
            id = "com.github.hierynomus.license"
            displayName = "License plugin for Gradle"
            tags = [ "gradle", "plugin", "license" ]
        }
    }
}

if (!System.env.containsKey("JENKINS_URL")) {
    def javaVersion = System.properties['java.version']
    if (JavaVersion.toVersion(javaVersion) != project.targetCompatibility) {
//        throw new GradleException("Expected Java version ${project.targetCompatibility} but running with $javaVersion")
    }
}
